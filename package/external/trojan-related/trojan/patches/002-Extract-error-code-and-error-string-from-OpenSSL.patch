From c4316e94039f401ef9ac0228f55f1d0e31ebba0b Mon Sep 17 00:00:00 2001
From: Syrone Wong <wong.syrone@gmail.com>
Date: Sat, 16 Mar 2019 14:04:30 +0800
Subject: [PATCH] Extract error code and error string from OpenSSL

for both client and server sessions
and warn user when openssl err facility is disabled
at compile time

Signed-off-by: Syrone Wong <wong.syrone@gmail.com>
---
 src/clientsession.cpp |  2 +-
 src/log.cpp           | 18 ++++++++++++++++++
 src/log.h             |  6 ++++++
 src/serversession.cpp |  2 +-
 4 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/src/clientsession.cpp b/src/clientsession.cpp
index e560d16..9814dd0 100644
--- a/src/clientsession.cpp
+++ b/src/clientsession.cpp
@@ -255,7 +255,7 @@ void ClientSession::in_sent() {
                     }
                     out_socket.async_handshake(stream_base::client, [this, self](const boost::system::error_code error) {
                         if (error) {
-                            Log::log_with_endpoint(in_endpoint, "SSL handshake failed with " + config.remote_addr + ':' + to_string(config.remote_port) + ": " + error.message(), Log::ERROR);
+                            Log::log_with_endpoint_openssl_err(in_endpoint, "SSL handshake failed with " + config.remote_addr + ':' + to_string(config.remote_port) + ": ", error, Log::ERROR);
                             destroy();
                             return;
                         }
diff --git a/src/log.cpp b/src/log.cpp
index e3c010d..741b73e 100644
--- a/src/log.cpp
+++ b/src/log.cpp
@@ -90,3 +90,21 @@ void Log::reset() {
         keylog = NULL;
     }
 }
+
+void Log::log_with_endpoint_openssl_err(const boost::asio::ip::tcp::endpoint &endpoint, const std::string &message,
+        const boost::system::error_code &ec, Level level) {
+#ifdef OPENSSL_NO_ERR
+#warning OpenSSL ERR disabled
+    Log::log_with_endpoint(endpoint, message + ec.message(), level);
+#else // OPENSSL_NO_ERR
+    std::string errstr = message + ec.message();
+    if (ec.category() == boost::asio::error::get_ssl_category()) {
+        errstr += " OpenSSL: ";
+        // override 'asio.ssl error' error message
+        char buf[128];
+        ::ERR_error_string_n(ec.value(), buf, sizeof(buf));
+        errstr += buf;
+    }
+    Log::log_with_endpoint(endpoint, errstr, level);
+#endif // OPENSSL_NO_ERR
+}
diff --git a/src/log.h b/src/log.h
index b55a094..0ccad1d 100644
--- a/src/log.h
+++ b/src/log.h
@@ -23,6 +23,10 @@
 #include <cstdio>
 #include <string>
 #include <boost/asio/ip/tcp.hpp>
+#include <boost/asio/ssl.hpp>
+
+#include <openssl/err.h>
+#include <openssl/opensslconf.h>
 
 #if defined(ANDROID) || defined(__ANDROID__)
 #include <android/log.h>
@@ -50,6 +54,8 @@ public:
     static void redirect(const std::string &filename);
     static void redirect_keylog(const std::string &filename);
     static void reset();
+    static void log_with_endpoint_openssl_err(const boost::asio::ip::tcp::endpoint &endpoint, const std::string &message,
+            const boost::system::error_code &ec, Level level = ALL);
 private:
     static FILE *output_stream;
 };
diff --git a/src/serversession.cpp b/src/serversession.cpp
index c272352..651351e 100644
--- a/src/serversession.cpp
+++ b/src/serversession.cpp
@@ -48,7 +48,7 @@ void ServerSession::start() {
     auto self = shared_from_this();
     in_socket.async_handshake(stream_base::server, [this, self](const boost::system::error_code error) {
         if (error) {
-            Log::log_with_endpoint(in_endpoint, "SSL handshake failed: " + error.message(), Log::ERROR);
+            Log::log_with_endpoint_openssl_err(in_endpoint, "SSL handshake failed: ", error, Log::ERROR);
             if (error.message() == "http request" && plain_http_response != "") {
                 sent_len += plain_http_response.length();
                 boost::asio::async_write(accept_socket(), boost::asio::buffer(plain_http_response), [this, self](const boost::system::error_code, size_t) {
-- 
2.21.0

